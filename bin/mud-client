#!/usr/local/bin/php
<?php

$port       = 9000;
$address    = '192.168.1.33';

$port       = 9000;
$address    = 'balderdash.ru';

$port       = 9001;
$address    = 'localhost';

define ( 'KEY_ESC', "\x1b" );
define ( 'KEY_ENTER', "\x0d" );
define ( 'KEY_BACKSPACE', "\x7f" );
define ( 'KEY_LEFT',    269);
define ( 'KEY_RIGHT',   261);
define ( 'KEY_UP',      259);
define ( 'KEY_DOWN',    258);

$GLOBALS['debug'] = 0;
$GLOBALS['history']['cursor'] = false;

echo `stty -g`;

$commands = array(
    'qй' => 'command_exit',
    'iш' => 'command_prompt',
    'dв' => 'command_debug',
);

function command_manager($command){
    global $commands;
    static $cache;
    if ( !$cache ){
        foreach ( $commands as $key => $function ){
            $key = iconv( 'UTF-8', 'KOI8-R', $key );
            foreach ( str_split( $key ) as $k ){
                $cache[$k] = $function;
            }
        }
    }

    write_log(sprintf( "KEY: %x", ( int ) ord( $command ) ));

    if ( isset( $cache[$command] ) ){
        $cache[$command]();
        return true;
    }
    return false;
}

function command_exit(  ){
    global $socket, $address, $port, $pid;

    #$c = fgetc(STDIN);
    #printf("KEY: %x\n", (int) ord($c));

    posix_kill( $pid, SIGUSR1);
    pcntl_wait($status); //Protect against Zombie children
    echo "\nquit\n";
    exit;
}

function command_debug(){
    $GLOBALS['debug'] -= 1;
    $GLOBALS['debug'] *= $GLOBALS['debug'];

    echo "DEBUG MODE " . ($GLOBALS['debug'] ? 'ENABLED' : 'DISABLED') . "\r\n";
}

function write_log($info){
    if ($GLOBALS['debug'] === 0){
        return;
    }

    fwrite(STDOUT, "\033[0;33m" . $info . "\033[0m\r\n");
}

function history_search($history, $prefix, $direction = -1){
    $cursor = & $GLOBALS['history']['cursor'];
    if ($cursor === false || $cursor < 0){
        $cursor = count($history);
    }

    if ($cursor + $direction > count($history) - 1){
        $cursor = -1; 
    }

    for ($i = $cursor + $direction; $i >= 0 && $i < count($history); $i += $direction){
        if ( substr($history[$i], 0, strlen($prefix)) === $prefix && $history[$i] !== $prefix){
            $cursor = $i;
            return $history[$i];
        }
    }

    for ($i = count($history) - 1 ; $i > max($cursor, 0) && $i < count($history); $i += $direction){
        if ( substr($history[$i], 0, strlen($prefix)) === $prefix && $history[$i] !== $prefix){
            $cursor = $i;
            return $history[$i];
        }
    }
    $cursor += $direction;

    return $prefix;
}

function fget_command(){

    static $history = array();
    static $cnt = 0;

    fwrite( STDOUT, "\n\r> ");

    $buffer = '';
    $output = '';
    while ( true ){
        $key    = ncurses_getch( );
        $char   = chr($key);

        if ( $char === KEY_ENTER ){
            $GLOBALS['history']['cursor'] = array_search($output, $history);
            if ($GLOBALS['history']['cursor'] === false){
                $history[] = $output;
            }
            else {
                $GLOBALS['history']['cursor']++;
            }
            return $output;
        }

        if ( $char === KEY_ESC ){
            echo "\x0D> " . str_pad(' ', strlen($output));
            return false;
        }

        if ( $char === KEY_BACKSPACE ){
            echo "\x0D> " . str_pad(' ', strlen($output));
            $output = substr( $output, 0, -1 );
            $buffer = $output;
            echo "\x0D> " . $output;
            #ncurses_killchar();
            continue;
        }

        if ( $key === KEY_UP ){
            echo "\x0D> " . str_pad(' ', strlen($output));
            $output = history_search($history, $buffer, -1);
            echo "\x0D> " . $output;
            continue;
        }

        if ( $key === KEY_DOWN ){
            echo "\x0D> " . str_pad(' ', strlen($output));
            $output = history_search($history, $buffer, +1);
            echo "\x0D> " . $output;
            continue;
        }

        $buffer .= $char;
        $output .= $char;
        echo "\x0D> " . $output;
    }
}

function command_prompt(  ){
    global $socket, $address, $port, $pid;

    while ( true ){

        $cmd = fget_command( STDIN );
        if ( $cmd  === false ){
            break;
        }

        $status = @socket_write( $socket, $cmd . "\n" );
        if ( $status === false){

            $text = "Disconnect from remote host {$address}[$port]: " .  socket_strerror( socket_last_error( )) . "\n";
            fwrite( STDOUT, $text);
            posix_kill( $pid, SIGUSR1);
            pcntl_wait($status); //Protect against Zombie children
            exit( 0 );
        }
    }
    echo "\x0D#";
}

#$port       = 9000;
#$address    = 'balderdash.ru';

$socket = @socket_create( AF_INET, SOCK_STREAM, SOL_TCP);
$connected = 0; 
if ( $socket ){
    $conected = socket_connect( $socket, $address, $port);
}

if ( $connected === true) {
    $text = "Connection successful on IP $address, port $port";
}
else{
    #var_dump( $connected );
    #$text = "Unable to connect {$address}[$port]: " .  socket_strerror( socket_last_error( )) . "\n";
    #echo $text;
    #exit( 1 );
}

$exit = 0;

#socket_set_nonblock( $socket); 
$hello = "Hello \033[1;47mТорнел\033[0m\n";
$hello = iconv( 'UTF-8', 'KOI8-R', $hello );
echo $hello;

#system( 'stty -icanon -echo -cread' );

$pid = pcntl_fork();
if ($pid == -1) {

     die('could not fork');

} else if ($pid) {
    // we are the parent
    #system( 'stty -icanon -echo -cread' );
    ncurses_init();
    ncurses_noecho();

    while (true){
        #$input  = fgetc(STDIN);

        $input = ncurses_getch();
        if ($input === 0x1b){
            printf("ESC");
        }
        $input = chr($input);
        write_log(sprintf("CHAR %s ord(%d)", $input, (int) ord($input)));


        if ( $input === false ){
            continue;
        }

        command_manager( $input );

        if ( $input === 'p' ){
            socket_write( $socket, 'PING' );
            write_log('ping');
        }

    }

    posix_kill( $pid, SIGUSR1);
    pcntl_wait($status); //Protect against Zombie children
} else {
    // we are the child
    while ( true ){
        #usleep( 30000 );

        $server = @socket_read( $socket, 1024 );
        if ( $server ){
            fwrite( STDOUT, trim( $server ). "\n");
        }

        if ( $server === false ){
            break;
        }

        if ( $exit ){
            break;
        }
    }
}

socket_close( $socket);
